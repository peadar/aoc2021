#!/usr/bin/env python
import argparse
class Basins():
    def __init__(self, filename):
        self.grid = [ [int(i) for i in l.strip()] for l in open(filename) ]
        self.height = len(self.grid)
        self.width = len(self.grid[0])
    def peek(self, point):
        return self.grid[point[0]][point[1]]
    def adjacent(self, point):
        for off in [ (-1,0), (1,0), (0,-1), (0,1) ]:
            row,col = ( point[0] + off[0], point[1] + off[1] )
            if row >= 0 and row < self.height and col >= 0 and col < self.width:
                yield(row, col)
    def basinSize(self, point, visited):
        if self.peek(point) >= 9 or point in visited:
            return 0
        visited.add(point)
        return 1 + sum(self.basinSize(adj, visited) for adj in self.adjacent(point) if self.peek(adj) >= self.peek(point) )
    def findBasins(self):
        basins = []
        risk = 0
        for row in range(self.height):
            for col in range(self.width):
                here = (row,col)
                if all(self.peek(here) < adj for adj in (self.peek(point) for point in self.adjacent(here))):
                    risk += self.peek(here) + 1
                    basins.append((self.basinSize(here, set()), here))
        basins.sort( key= lambda kv: kv[0])
        return risk, basins[-3:]
    def ppm(self, bright):
        print("P3 %d %d 81" % ( len(self.grid[0]), len(self.grid)))
        for row,l in enumerate(self.grid):
            for col,i in enumerate(l):
                print("%d %d %d " % (i*i if (row,col) in bright else 0, 0, i*i), end="")
            print("")

parser = argparse.ArgumentParser()
parser.add_argument("--ppm", help="generate a PPM visualization", action="store_true")
parser.add_argument("--infile", "-i", help="input file name", default=".input")
args = parser.parse_args()
solver = Basins(args.infile)
risk, basins = solver.findBasins()
if args.ppm:
    visited = set()
    for size,centre in basins[-3:]:
        solver.basinSize(centre, visited)
    solver.ppm(visited)
else:
    print("part1: %d" % risk)
    print("part2: %d" % (basins[0][0] * basins[1][0] * basins[2][0]))
